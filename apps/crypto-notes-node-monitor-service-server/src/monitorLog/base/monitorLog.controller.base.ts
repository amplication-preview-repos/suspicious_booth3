/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MonitorLogService } from "../monitorLog.service";
import { MonitorLogCreateInput } from "./MonitorLogCreateInput";
import { MonitorLog } from "./MonitorLog";
import { MonitorLogFindManyArgs } from "./MonitorLogFindManyArgs";
import { MonitorLogWhereUniqueInput } from "./MonitorLogWhereUniqueInput";
import { MonitorLogUpdateInput } from "./MonitorLogUpdateInput";

export class MonitorLogControllerBase {
  constructor(protected readonly service: MonitorLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MonitorLog })
  async createMonitorLog(
    @common.Body() data: MonitorLogCreateInput
  ): Promise<MonitorLog> {
    return await this.service.createMonitorLog({
      data: {
        ...data,

        node: data.node
          ? {
              connect: data.node,
            }
          : undefined,

        status: data.status
          ? {
              connect: data.status,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        node: {
          select: {
            id: true,
          },
        },

        status: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MonitorLog] })
  @ApiNestedQuery(MonitorLogFindManyArgs)
  async monitorLogs(@common.Req() request: Request): Promise<MonitorLog[]> {
    const args = plainToClass(MonitorLogFindManyArgs, request.query);
    return this.service.monitorLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,

        node: {
          select: {
            id: true,
          },
        },

        status: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MonitorLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async monitorLog(
    @common.Param() params: MonitorLogWhereUniqueInput
  ): Promise<MonitorLog | null> {
    const result = await this.service.monitorLog({
      where: params,
      select: {
        createdAt: true,
        id: true,

        node: {
          select: {
            id: true,
          },
        },

        status: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MonitorLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMonitorLog(
    @common.Param() params: MonitorLogWhereUniqueInput,
    @common.Body() data: MonitorLogUpdateInput
  ): Promise<MonitorLog | null> {
    try {
      return await this.service.updateMonitorLog({
        where: params,
        data: {
          ...data,

          node: data.node
            ? {
                connect: data.node,
              }
            : undefined,

          status: data.status
            ? {
                connect: data.status,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          node: {
            select: {
              id: true,
            },
          },

          status: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MonitorLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMonitorLog(
    @common.Param() params: MonitorLogWhereUniqueInput
  ): Promise<MonitorLog | null> {
    try {
      return await this.service.deleteMonitorLog({
        where: params,
        select: {
          createdAt: true,
          id: true,

          node: {
            select: {
              id: true,
            },
          },

          status: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
