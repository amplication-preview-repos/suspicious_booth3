/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MonitorLog as PrismaMonitorLog,
  Node as PrismaNode,
  Status as PrismaStatus,
} from "@prisma/client";

export class MonitorLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MonitorLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.monitorLog.count(args);
  }

  async monitorLogs(
    args: Prisma.MonitorLogFindManyArgs
  ): Promise<PrismaMonitorLog[]> {
    return this.prisma.monitorLog.findMany(args);
  }
  async monitorLog(
    args: Prisma.MonitorLogFindUniqueArgs
  ): Promise<PrismaMonitorLog | null> {
    return this.prisma.monitorLog.findUnique(args);
  }
  async createMonitorLog(
    args: Prisma.MonitorLogCreateArgs
  ): Promise<PrismaMonitorLog> {
    return this.prisma.monitorLog.create(args);
  }
  async updateMonitorLog(
    args: Prisma.MonitorLogUpdateArgs
  ): Promise<PrismaMonitorLog> {
    return this.prisma.monitorLog.update(args);
  }
  async deleteMonitorLog(
    args: Prisma.MonitorLogDeleteArgs
  ): Promise<PrismaMonitorLog> {
    return this.prisma.monitorLog.delete(args);
  }

  async getNode(parentId: string): Promise<PrismaNode | null> {
    return this.prisma.monitorLog
      .findUnique({
        where: { id: parentId },
      })
      .node();
  }

  async getStatus(parentId: string): Promise<PrismaStatus | null> {
    return this.prisma.monitorLog
      .findUnique({
        where: { id: parentId },
      })
      .status();
  }
}
