/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MonitorLog } from "./MonitorLog";
import { MonitorLogCountArgs } from "./MonitorLogCountArgs";
import { MonitorLogFindManyArgs } from "./MonitorLogFindManyArgs";
import { MonitorLogFindUniqueArgs } from "./MonitorLogFindUniqueArgs";
import { CreateMonitorLogArgs } from "./CreateMonitorLogArgs";
import { UpdateMonitorLogArgs } from "./UpdateMonitorLogArgs";
import { DeleteMonitorLogArgs } from "./DeleteMonitorLogArgs";
import { Node } from "../../node/base/Node";
import { Status } from "../../status/base/Status";
import { MonitorLogService } from "../monitorLog.service";
@graphql.Resolver(() => MonitorLog)
export class MonitorLogResolverBase {
  constructor(protected readonly service: MonitorLogService) {}

  async _monitorLogsMeta(
    @graphql.Args() args: MonitorLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MonitorLog])
  async monitorLogs(
    @graphql.Args() args: MonitorLogFindManyArgs
  ): Promise<MonitorLog[]> {
    return this.service.monitorLogs(args);
  }

  @graphql.Query(() => MonitorLog, { nullable: true })
  async monitorLog(
    @graphql.Args() args: MonitorLogFindUniqueArgs
  ): Promise<MonitorLog | null> {
    const result = await this.service.monitorLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MonitorLog)
  async createMonitorLog(
    @graphql.Args() args: CreateMonitorLogArgs
  ): Promise<MonitorLog> {
    return await this.service.createMonitorLog({
      ...args,
      data: {
        ...args.data,

        node: args.data.node
          ? {
              connect: args.data.node,
            }
          : undefined,

        status: args.data.status
          ? {
              connect: args.data.status,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MonitorLog)
  async updateMonitorLog(
    @graphql.Args() args: UpdateMonitorLogArgs
  ): Promise<MonitorLog | null> {
    try {
      return await this.service.updateMonitorLog({
        ...args,
        data: {
          ...args.data,

          node: args.data.node
            ? {
                connect: args.data.node,
              }
            : undefined,

          status: args.data.status
            ? {
                connect: args.data.status,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MonitorLog)
  async deleteMonitorLog(
    @graphql.Args() args: DeleteMonitorLogArgs
  ): Promise<MonitorLog | null> {
    try {
      return await this.service.deleteMonitorLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Node, {
    nullable: true,
    name: "node",
  })
  async getNode(@graphql.Parent() parent: MonitorLog): Promise<Node | null> {
    const result = await this.service.getNode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Status, {
    nullable: true,
    name: "status",
  })
  async getStatus(
    @graphql.Parent() parent: MonitorLog
  ): Promise<Status | null> {
    const result = await this.service.getStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
