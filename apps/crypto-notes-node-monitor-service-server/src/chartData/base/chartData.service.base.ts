/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ChartData as PrismaChartData } from "@prisma/client";

export class ChartDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChartDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chartData.count(args);
  }

  async chartDataItems(
    args: Prisma.ChartDataFindManyArgs
  ): Promise<PrismaChartData[]> {
    return this.prisma.chartData.findMany(args);
  }
  async chartData(
    args: Prisma.ChartDataFindUniqueArgs
  ): Promise<PrismaChartData | null> {
    return this.prisma.chartData.findUnique(args);
  }
  async createChartData(
    args: Prisma.ChartDataCreateArgs
  ): Promise<PrismaChartData> {
    return this.prisma.chartData.create(args);
  }
  async updateChartData(
    args: Prisma.ChartDataUpdateArgs
  ): Promise<PrismaChartData> {
    return this.prisma.chartData.update(args);
  }
  async deleteChartData(
    args: Prisma.ChartDataDeleteArgs
  ): Promise<PrismaChartData> {
    return this.prisma.chartData.delete(args);
  }
}
