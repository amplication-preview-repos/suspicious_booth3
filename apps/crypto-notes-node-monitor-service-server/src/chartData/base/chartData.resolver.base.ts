/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChartData } from "./ChartData";
import { ChartDataCountArgs } from "./ChartDataCountArgs";
import { ChartDataFindManyArgs } from "./ChartDataFindManyArgs";
import { ChartDataFindUniqueArgs } from "./ChartDataFindUniqueArgs";
import { CreateChartDataArgs } from "./CreateChartDataArgs";
import { UpdateChartDataArgs } from "./UpdateChartDataArgs";
import { DeleteChartDataArgs } from "./DeleteChartDataArgs";
import { ChartDataService } from "../chartData.service";
@graphql.Resolver(() => ChartData)
export class ChartDataResolverBase {
  constructor(protected readonly service: ChartDataService) {}

  async _chartDataItemsMeta(
    @graphql.Args() args: ChartDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChartData])
  async chartDataItems(
    @graphql.Args() args: ChartDataFindManyArgs
  ): Promise<ChartData[]> {
    return this.service.chartDataItems(args);
  }

  @graphql.Query(() => ChartData, { nullable: true })
  async chartData(
    @graphql.Args() args: ChartDataFindUniqueArgs
  ): Promise<ChartData | null> {
    const result = await this.service.chartData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChartData)
  async createChartData(
    @graphql.Args() args: CreateChartDataArgs
  ): Promise<ChartData> {
    return await this.service.createChartData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChartData)
  async updateChartData(
    @graphql.Args() args: UpdateChartDataArgs
  ): Promise<ChartData | null> {
    try {
      return await this.service.updateChartData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChartData)
  async deleteChartData(
    @graphql.Args() args: DeleteChartDataArgs
  ): Promise<ChartData | null> {
    try {
      return await this.service.deleteChartData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
